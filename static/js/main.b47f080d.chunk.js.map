{"version":3,"sources":["components/Country.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["Country","country","position","endpoint","useState","countryStats","setStats","useEffect","fetch","then","results","json","data","confirmed","value","recovered","deaths","className","Map","center","zoom","TileLayer","attribution","url","Marker","Popup","Container","state","this","props","lat","lon","Component","App","geoLoc","handleClick","console","log","setState","catch","err","error","undefined","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"sTAiDeA,EAxCC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SACpBC,EAAQ,mDAA+CF,GADpB,EAERG,mBAAS,MAFD,mBAElCC,EAFkC,KAEpBC,EAFoB,KAczC,OAXAC,qBAAU,WACRC,MAAML,GACHM,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GACJN,EAAS,CACPO,UAAWD,EAAKC,UAAUC,MAC1BC,UAAWH,EAAKG,UAAUD,MAC1BE,OAAQJ,EAAKI,OAAOF,aAGzB,CAACX,IACiB,OAAjBE,EACK,yBAAKY,UAAU,IAAId,GAGxB,kBAACe,EAAA,EAAD,CAAKC,OAAQjB,EAAUkB,KAAM,GAC3B,kBAACC,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,uDAEN,kBAACC,EAAA,EAAD,CAAQtB,SAAUA,GAChB,kBAACuB,EAAA,EAAD,KACE,oCAAUxB,GADZ,IAC8B,6BAC5B,yBAAKgB,UAAU,cAAf,cACcZ,EAAaQ,WAE3B,yBAAKI,UAAU,aAAf,eACeZ,EAAaU,UAAW,KAEvC,yBAAKE,UAAU,WAAf,YAAmCZ,EAAaW,YCnB7CU,E,4MAZbC,MAAQ,CACNP,KAAM,G,uDAGN,IAAMlB,EAAW,CAAC0B,KAAKC,MAAM3B,SAAS4B,IAAKF,KAAKC,MAAM3B,SAAS6B,KAC/D,OACE,oCACE,kBAAC,EAAD,CAAS9B,QAAS2B,KAAKC,MAAM3B,SAASD,QAASC,SAAUA,S,GARzC8B,aCqCTC,G,kNA/BbN,MAAQ,CACNO,OAAQ,I,EAcVC,YAAc,WACZC,QAAQC,IAAI,Y,kEAZO,IAAD,OAClB7B,MARa,0BASVC,MAAK,SAAAyB,GAAM,OAAIA,EAAOvB,UACtBF,MAAK,SAAAyB,GACJ,EAAKI,SAAS,CAAEJ,OAAQA,OAEzBK,OAAM,SAAAC,GACLJ,QAAQK,MAAMD,Q,+BAQlB,YAA8BE,IAA1Bd,KAAKD,MAAMO,OAAOJ,IACb,yBAAKb,UAAU,WAAf,eAGL,yBAAKA,UAAU,IACb,kBAAC,EAAD,CAAWf,SAAU0B,KAAKD,MAAMO,c,GAzBxBF,cCFEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdlB,OAAM,SAAAE,GACLL,QAAQK,MAAMA,EAAMiB,c","file":"static/js/main.b47f080d.chunk.js","sourcesContent":["/**\n * @Author: Ali\n * @Date:   2020-05-07T10:25:34+02:00\n * @Last modified by:   Ali\n * @Last modified time: 2020-05-07T17:33:06+02:00\n */\nimport React, { useState, useEffect } from \"react\";\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\n\nconst Country = ({ country, position }) => {\n  const endpoint = `https://covid19.mathdro.id/api/countries/${country}`;\n  const [countryStats, setStats] = useState(null);\n  useEffect(() => {\n    fetch(endpoint)\n      .then(results => results.json())\n      .then(data => {\n        setStats({\n          confirmed: data.confirmed.value,\n          recovered: data.recovered.value,\n          deaths: data.deaths.value\n        });\n      });\n  }, [endpoint]);\n  if (countryStats === null) {\n    return <div className=\"\">{endpoint}</div>;\n  } else {\n    return (\n      <Map center={position} zoom={6}>\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker position={position}>\n          <Popup>\n            <strong> {country}</strong> <br />\n            <div className=\"makeyellow\">\n              Confirmed :{countryStats.confirmed}\n            </div>\n            <div className=\"makegreen\">\n              Recovered : {countryStats.recovered}{\" \"}\n            </div>\n            <div className=\"makered\"> Deaths: {countryStats.deaths}</div>\n          </Popup>\n        </Marker>\n      </Map>\n    );\n  }\n};\n\nexport default Country;\n","/**\n * @Author: Ali\n * @Date:   2020-05-06T14:42:36+02:00\n * @Last modified by:   Ali\n * @Last modified time: 2020-05-07T17:37:34+02:00\n */\nimport React, { Component } from \"react\";\nimport Country from \"./Country\";\n\nclass Container extends Component {\n  state = {\n    zoom: 6\n  };\n  render() {\n    const position = [this.props.position.lat, this.props.position.lon];\n    return (\n      <>\n        <Country country={this.props.position.country} position={position} />\n      </>\n    );\n  }\n}\nexport default Container;\n","/**\n * @Author: Ali\n * @Date:   2020-05-05T22:54:53+02:00\n * @Last modified by:   Ali\n * @Last modified time: 2020-05-07T14:17:35+02:00\n */\n\nimport React, { Component } from \"react\";\nimport Container from \"./components/Container\";\n\nimport \"./app.css\";\n\nconst endpoint = \"http://ip-api.com/json\";\n\nclass App extends Component {\n  state = {\n    geoLoc: {}\n  };\n\n  componentDidMount() {\n    fetch(endpoint)\n      .then(geoLoc => geoLoc.json())\n      .then(geoLoc => {\n        this.setState({ geoLoc: geoLoc });\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }\n\n  handleClick = () => {\n    console.log(\"clicked\");\n  };\n  render() {\n    if (this.state.geoLoc.lat === undefined) {\n      return <div className=\"loading\">loading ...</div>;\n    } else {\n      return (\n        <div className=\"\">\n          <Container position={this.state.geoLoc} />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}